  ld hl,tunings
  ld de,general_tuning
  ld bc,2*12+12
  ldir
  jq after_tunings

tunings:
; FOR GENERAL PURPOSE CHANNELS
; set these to `round(2^((n - 69) / 12) * 440 * 65536 / (freq / (5 * 176)))` with
;   n = 120..131 (MIDI codes for C9..B9)
;   69 = MIDI code for A4
;   12 = number of semitones in an octave
;   440 = target frequency of A4 in Hz
;   65536 = total size of oscillator
;   freq = CPU frequency in fast mode in Hz (normally around 15-16 MHz)
;   5 * 176 = number of clock cycles per effective sample (the 5 multiplier is because there are 5 channels of 176cc each)
;   round() should round to the nearest whole number
; if any of these are too big for 16-bit, then your clock speed is too low, see below for a possible fix
; (seriously though? your clock speed is less than 13.9078 MHz?)
  dw $739C,$7A7C,$81C4,$897C,$91A9,$9A52,$A37F,$AD38,$B785,$C26E,$CDFE,$DA3E
; FOR BASS CHANNEL
; set these to `round(1 / (2^((n - 69) / 12) * 440) * (freq / (5 * 176)) / 8)` with
;   n = 12..18, then 7..11 (MIDI codes for C0..F#0, G-1..B-1)
;   69, 12, 440, (freq / (5 * 176)) = same as above
;   8 = because there are 8 segments that can be output
;   round() should round to the nearest whole number
; if any of these are too big for 8-bit, then your clock speed is too high, see below for a fix
  db $8E,$86,$7E,$77,$70,$6A,$64,$BD,$B3,$A9,$9F,$96
; WHAT TO DO IF SOME NUMBERS ARE OUT OF RANGE:
; you can try messing with the interrupt frequency (that 176 number in the formula)
; if your clock speed is too high, you can decrease the interrupt frequency (increase the 176)
; if your clock speed is too low, you can try increasing the interrupt frequency *slightly* (decrease the 176) (make sure it stays above 159cc or so, as that's the longest the interrupt itself can take)
; for this, find where I'm setting the interrupt frequency (probably init_driver.z80, search the file for 176, but check the file you're assembling, maybe it's doing it somewhere else)
; ...and of course change the 176 in the formulas above


if 0

measure_cpu:
  assert driver_ram shr 8 = $c3
  ld hl,$c303
  ld [driver_ram + 2044]
  ld l,$01
  ld [driver_ram + 2046]
  ld de,driver_ram + 1
  ld bc,2043
  ld [hl],0
  ldir

  ld a,$c3
  ld [interrupt_ram],a
  ld hl,.starttmr
  ld [interrupt_ram + 1],hl
  ld a,$46
  out [$30],a
  ld a,$03
  out [$31],a
  ld a,1
  out [$32],a
  ei
  jq driver_ram

tunings:
repeat 12, i:120
  ; round(2^((n - 69) / 12) * 440 * 65536 / ((freq/2)*2 / (5 * (176))) * 256)
  emit trunc(1.0594630943592952645618252949463417007792043174941856285592 shl (i - 43) * 275 + .5):5
end repeat
iterate <count,start>, 9,12, 3,7
  repeat count, i:start
    emit 
  end repeat
end iterate

.starttmr:
  ld a,$03
  out [$31],a
  ld a,128
  out [32],a
  ld bc,0
  pop hl
  ld hl,.stoptmr
  ld [interrupt_ram + 1],hl
  ei
  jq driver_ram

.stoptmr:
  xor a
  out [$30],a
  out [$31],a

  pop hl
  ld a,l
  cp (driver_ram + 2045) and $00ff
  jq nz,.not_last_instr
  ld a,h
  cp (driver_ram + 2045) shr 8
  jq nz,.not_last_instr
  ld hl,4091
  jq .done_instr
.not_last_instr:
  ld de,-driver_ram
  add hl,de
  add hl,hl
.done_instr:

  ld a,c
  rrca
  rrca
  rrca
  rrca
  and $f0
  or h
  ld h,a

  ld a,c
  srl b
  rra
  srl b
  rra
  srl b
  rra
  srl b
  jq nz,speed_out_of_range
  rra

  ex de,hl
  ld iyl,a
  ; now IYLDE is the clock speed


  ld [interrupt_ram],sp
  ld sp,tunings

  exx
  ld hl,general_tuning + 11
  ld b,12

.general_loop:
  exx

  pop bc
  dec sp
  pop hl

  iylde_mul_hlc

  exx
  ld [hl],a
  dec hl
  ld a,ixh
  ld [hl],a
  dec hl
  djnz .general_loop

  ld sp,[interrupt_ram]


end if

after_tunings:


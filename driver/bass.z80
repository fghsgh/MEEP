include "bass_smcable.z80"

bass:
  ld a,bass_len + 1           ; if (!--bass_len)
  dec a
  jq nz,.playing
                              ;   bass_len = 1;
  ld a,bass_rest_len + 1      ;   if (!--bass_rest_len) {
  dec a
  jq z,.rest_done

  ld [bass_rest_len.addr],a
  xor  a
  ld [bass_outmask.addr],a    ;   (else) bass.out.mask = 0x00;
  jq .resting

.rest_done
  ld hl,bass_pointer          ;     if (*bass_pointer & 0x0f) {
.read_next_note:
  ld a,[hl]
  ld c,a
  and $0f
  jq z,.parse_command
  bass_reset_pwm
  bass_reset_arp

  ld a,bass_mask              ;       bass.out.mask = bass_mask & bass_globalmask;
  and bass_globalmask + $03
  ld [bass_outmask.addr],a
  add a,l                     ;       bass_pointer += bass_arp_count_reset;
  ld l,a
  adc a,h
  sub l
  ld h,a
  ld c,[hl]                   ;       {bass_len,bass_rest_len} = do_note_len(*bass_pointer++);
  inc hl
  ld [bass_pointer.addr],hl

.do_note_len:
  include "bass_note_len.z80"
.done_len:                    ;     } else {
                              ;       (later)
.done_read:                   ;     }
                              ;   }
.playing:                     ; }
  bass_pwm
  bass_arp
.resting:
  scf                         ; if (!mute_bass) {
.smc_mute_c:
  jq nc,.mute_bass

  ld a,bass_outlen            ;   bass.wavelength = bass.out.length;
  ld [basswave.length],a
  ld a,bass_outmask           ;   bass.mask = bass.out.mask;
  ld [basswave.mask],a
  jq .finish_bass


.parse_command:
  parse_command
.switch_cases:
  include "bass_commands.z80"

.mute_bass:
.finish_bass:

macro bass_reset_pwm
end macro


; inputs:
;  D: 0
;  HL: channel pointer
; outputs:
;  HL: channel pointer
; destroys: AF, E
macro bass_reset_arp
  ld [bass_arp_start.addr],hl ;       bass_arp_start = bass_arp_current = bass_pointer;
  ld [bass_arp_current.addr],hl
  ld a,1                      ;       bass_arp_delay = 1;
  ld [bass_arp_delay.addr],a ; make it read a new note immediately
  ld a,[bass_arp_count_reset.addr] ;  bass_arp_count = bass_arp_count_reset;
  ld [bass_arp_count.addr],a
  ld e,a
  add hl,de
end macro

macro bass_pwm
end macro

macro bass_arp
  ld a,bass_arp_delay         ; if (!--bass_arp_delay) {
  dec a
  jq nz,.bass_arp_delayed

  ld a,bass_arp_count         ;   if (!--bass_arp_count) {
  dec a
  jq nz,.bass_arp_next

  ld hl,bass_arp_start        ;     bass_arp_current = bass_arp_start;
  ld [bass_arp_current.addr],hl

  ld a,bass_arp_count_reset   ;   bass_arp_count = bass_arp_count_reset;
.bass_arp_next:               ;   }
  ld [bass_arp_count.addr],a

  ld a,bass_arp_delay_reset   ; bass_arp_delay = bass_arp_delay_reset;
.bass_arp_delayed:            ; }
  ld [bass_arp_delay.addr],a


  ld hl,bass_arp_current      ; bass_arp_current++;
  ld b,[hl]
  inc hl
  ld [bass_arp_current.addr],hl

  decode_note_bass            ;   bass.wavelength = bass_decode_note(bass_arp_current);
  ld [bass_outlen.addr],a
end macro
